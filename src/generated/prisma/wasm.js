
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approved: 'approved',
  sessionVersion: 'sessionVersion'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  fileNumber: 'fileNumber',
  name: 'name',
  phone: 'phone',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.TestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  price: 'price',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestAssignmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  testId: 'testId',
  status: 'status',
  assignedById: 'assignedById',
  assignedAt: 'assignedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SampleScalarFieldEnum = {
  id: 'id',
  testAssignmentId: 'testAssignmentId',
  sampleCode: 'sampleCode',
  collectedAt: 'collectedAt',
  collectedById: 'collectedById',
  notes: 'notes',
  results: 'results',
  reportPdfUrl: 'reportPdfUrl'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  isPaid: 'isPaid',
  invoiceDate: 'invoiceDate',
  dueDate: 'dueDate',
  createdById: 'createdById'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  testAssignmentId: 'testAssignmentId',
  price: 'price',
  quantity: 'quantity',
  subtotal: 'subtotal'
};

exports.Prisma.QueueNumberScalarFieldEnum = {
  id: 'id',
  number: 'number',
  patientId: 'patientId',
  date: 'date',
  status: 'status'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  startDate: 'startDate',
  endDate: 'endDate',
  pdfUrl: 'pdfUrl',
  createdById: 'createdById'
};

exports.Prisma.PurchaseInvoiceScalarFieldEnum = {
  id: 'id',
  supplierName: 'supplierName',
  invoiceNumber: 'invoiceNumber',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  isPaid: 'isPaid',
  invoiceDate: 'invoiceDate',
  dueDate: 'dueDate',
  notes: 'notes',
  createdById: 'createdById'
};

exports.Prisma.PurchaseInvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  itemName: 'itemName',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  subtotal: 'subtotal'
};

exports.Prisma.RadiationResultScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  resultDetails: 'resultDetails',
  reportText: 'reportText',
  imageUrl: 'imageUrl',
  pdfUrl: 'pdfUrl',
  patientId: 'patientId',
  testAssignmentId: 'testAssignmentId',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabMaterialScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  category: 'category',
  description: 'description',
  unit: 'unit',
  currentQuantity: 'currentQuantity',
  minimumQuantity: 'minimumQuantity',
  price: 'price',
  supplier: 'supplier',
  expiryDate: 'expiryDate',
  location: 'location',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.MaterialTransactionScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  type: 'type',
  quantity: 'quantity',
  previousQuantity: 'previousQuantity',
  newQuantity: 'newQuantity',
  reason: 'reason',
  batchNumber: 'batchNumber',
  invoiceNumber: 'invoiceNumber',
  createdAt: 'createdAt',
  createdById: 'createdById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.PatientOrderByRelevanceFieldEnum = {
  id: 'id',
  fileNumber: 'fileNumber',
  name: 'name',
  phone: 'phone',
  address: 'address',
  createdById: 'createdById'
};

exports.Prisma.TestOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description'
};

exports.Prisma.TestAssignmentOrderByRelevanceFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  testId: 'testId',
  assignedById: 'assignedById'
};

exports.Prisma.SampleOrderByRelevanceFieldEnum = {
  id: 'id',
  testAssignmentId: 'testAssignmentId',
  sampleCode: 'sampleCode',
  collectedById: 'collectedById',
  notes: 'notes',
  results: 'results',
  reportPdfUrl: 'reportPdfUrl'
};

exports.Prisma.InvoiceOrderByRelevanceFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  createdById: 'createdById'
};

exports.Prisma.InvoiceItemOrderByRelevanceFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  testAssignmentId: 'testAssignmentId'
};

exports.Prisma.QueueNumberOrderByRelevanceFieldEnum = {
  id: 'id',
  patientId: 'patientId'
};

exports.Prisma.ReportOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  pdfUrl: 'pdfUrl',
  createdById: 'createdById'
};

exports.Prisma.PurchaseInvoiceOrderByRelevanceFieldEnum = {
  id: 'id',
  supplierName: 'supplierName',
  invoiceNumber: 'invoiceNumber',
  notes: 'notes',
  createdById: 'createdById'
};

exports.Prisma.PurchaseInvoiceItemOrderByRelevanceFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  itemName: 'itemName',
  description: 'description'
};

exports.Prisma.RadiationResultOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  resultDetails: 'resultDetails',
  reportText: 'reportText',
  imageUrl: 'imageUrl',
  pdfUrl: 'pdfUrl',
  patientId: 'patientId',
  testAssignmentId: 'testAssignmentId',
  createdById: 'createdById'
};

exports.Prisma.LabMaterialOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  unit: 'unit',
  supplier: 'supplier',
  location: 'location',
  notes: 'notes',
  createdById: 'createdById'
};

exports.Prisma.MaterialTransactionOrderByRelevanceFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  reason: 'reason',
  batchNumber: 'batchNumber',
  invoiceNumber: 'invoiceNumber',
  createdById: 'createdById'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  RECEPTIONIST: 'RECEPTIONIST',
  LAB_TECHNICIAN: 'LAB_TECHNICIAN',
  ACCOUNTANT: 'ACCOUNTANT',
  PENDING: 'PENDING'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.TestStatus = exports.$Enums.TestStatus = {
  PENDING: 'PENDING',
  SAMPLE_COLLECTED: 'SAMPLE_COLLECTED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.QueueStatus = exports.$Enums.QueueStatus = {
  WAITING: 'WAITING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ReportType = exports.$Enums.ReportType = {
  PATIENT: 'PATIENT',
  TEST: 'TEST',
  FINANCIAL: 'FINANCIAL',
  SAMPLE: 'SAMPLE',
  SUMMARY: 'SUMMARY'
};

exports.MaterialCategory = exports.$Enums.MaterialCategory = {
  REAGENT: 'REAGENT',
  CONSUMABLE: 'CONSUMABLE',
  EQUIPMENT: 'EQUIPMENT',
  GLASSWARE: 'GLASSWARE',
  CHEMICAL: 'CHEMICAL',
  OTHER: 'OTHER'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  ADD: 'ADD',
  REDUCE: 'REDUCE',
  ADJUST: 'ADJUST',
  EXPIRED: 'EXPIRED',
  DAMAGED: 'DAMAGED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Patient: 'Patient',
  Test: 'Test',
  TestAssignment: 'TestAssignment',
  Sample: 'Sample',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  QueueNumber: 'QueueNumber',
  Report: 'Report',
  PurchaseInvoice: 'PurchaseInvoice',
  PurchaseInvoiceItem: 'PurchaseInvoiceItem',
  RadiationResult: 'RadiationResult',
  LabMaterial: 'LabMaterial',
  MaterialTransaction: 'MaterialTransaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
